
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // USER AVATARS: A user can only write to their own avatar path. Public read.
    match /user-avatars/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // GROUP AVATARS: Only the user who is the ownerId in the path can write. Public read.
    match /group-avatars/{ownerId}/{groupId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == ownerId;
    }

    // GROUP MEDIA: Any authenticated user who is a member of the group can read/write.
    // This rule now checks for the existence of the group document before checking membership
    // to prevent race conditions where the rule is checked before the doc is available.
    match /group-media/{groupId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
        let groupDoc = get(/databases/$(database)/documents/groups/$(groupId))
        in groupDoc != null && request.auth.uid in groupDoc.data.memberUserIds;
    }
  }
}
