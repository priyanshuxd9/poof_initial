
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // ================== USER AVATARS ==================
    // Path: /user-avatars/{userId}/avatar.jpg
    // A user can only write to their own avatar path.
    match /user-avatars/{userId}/{allPaths=**} {
      allow read: if isSignedIn(); // Anyone signed in can view avatars
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // ================== GROUP ICONS (AVATARS) ==================
    // Path: /group-avatars/{ownerId}/{groupId}/avatar.jpg
    // Only the owner of the group can upload a group icon.
    // This rule checks the path, not the database, to avoid race conditions on creation.
    match /group-avatars/{ownerId}/{groupId}/{allPaths=**} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == ownerId;
    }

    // ================== GROUP MEDIA (CHAT FILES) ==================
    // Path: /group-media/{groupId}/{userId}/{fileId}
    // Any member can upload a file, but they can only write to a path containing their own userId.
    // Any member can read any file from the group's media folder.
    match /group-media/{groupId}/{userId}/{fileId} {
      // READ rule: User can read if they are a member of the group.
      // This requires a database check.
      allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
      
      // WRITE rule: User can write if their UID is in the path and the file is < 5MB.
      // This does NOT require a database check, which avoids race conditions.
      allow write: if isSignedIn() && request.auth.uid == userId && request.resource.size < 5 * 1024 * 1024;
    }
  }
}
