rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if a user is a member of a group.
    // This requires a read call to Firestore.
    function isGroupMember(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }

    // Helper function to check if the user is the owner of a group.
    function isGroupOwner(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId;
    }

    // Profile pictures:
    // Anyone can read, but only the authenticated user can write to their own avatar path.
    match /user-avatars/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Group icons:
    // Anyone can read, but only the group owner can write.
    match /group-avatars/{groupId}/{fileName} {
      allow read: if true;
      allow write: if isGroupOwner(groupId);
    }

    // Group media (images/videos):
    // A user can read media if they are a member of the group.
    // A user can write media if they are a member, the file is under 30MB,
    // and the file is an image or a video.
    match /group-media/{groupId}/{fileId} {
      allow read: if isGroupMember(groupId);
      allow write: if isGroupMember(groupId) &&
                      request.resource.size < 30 * 1024 * 1024 &&
                      request.resource.contentType.matches('image/.*|video/.*');
    }
  }
}
