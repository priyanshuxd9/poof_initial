
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Function to check if the requesting user is a member of a given group.
    // It first checks if the group document exists in Firestore.
    function isGroupMember(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }

    // USER AVATARS: A user can only write to their own avatar path. Public read.
    match /user-avatars/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // GROUP AVATARS: Only the user who is the ownerId in the path can write. Public read.
    // This allows initial upload during creation and future updates by the owner.
    match /group-avatars/{ownerId}/{groupId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == ownerId;
    }

    // GROUP MEDIA: Any authenticated user who is a member of the group can read/write.
    match /group-media/{groupId}/{allPaths=**} {
      allow read, write: if isGroupMember(groupId);
    }
  }
}
