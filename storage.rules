
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // User Avatars: Users can only write to their own avatar path. Publicly readable.
    match /user-avatars/{userId}/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Group Avatars: Only the group owner can write a group avatar. Publicly readable.
    match /group-avatars/{ownerId}/{groupId}/avatar.jpg {
      allow read;
      allow write: if request.auth != null && request.auth.uid == ownerId;
    }
    
    // Group Media: The most reliable way to secure this is to include the uploader's UID in the path.
    // This avoids race conditions with checking Firestore on write.
    match /group-media/{groupId}/{userId}/{fileId} {
        // READ: Any member of the group can read any file in the group's media folder.
        // This requires a lookup to Firestore, which is fine for reads.
        allow read: if request.auth != null && 
                       exists(/databases/$(database)/documents/groups/$(groupId)) && 
                       request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
                       
        // WRITE: A user can only upload (write) if their UID matches the {userId} in the path.
        // This is a fast, reliable check that doesn't require a database lookup.
        allow write: if request.auth != null && 
                        request.auth.uid == userId &&
                        request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
  }
}
