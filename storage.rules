rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    function isGroupMember(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId))
             && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }

    // ========== USER AVATARS ==========
    // A user can only write to their own avatar path.
    match /user-avatars/{userId}/{fileName} {
      allow read: if true; // Publicly readable
      allow write: if request.auth.uid == userId;
    }

    // ========== GROUP AVATARS ==========
    // This rule handles two cases: creating a new group and updating an existing one.
    match /group-avatars/{groupId}/{fileName} {
      allow read: if true; // Publicly readable
      allow write: if request.auth != null && (
        // Case 1: Updating an existing group's icon. User must be the owner.
        (exists(/databases/$(database)/documents/groups/$(groupId)) &&
         request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId)
        ||
        // Case 2: Creating a new group's icon, where the group doc doesn't exist yet.
        // Allow any authenticated user to upload the initial avatar, with file constraints.
        (!exists(/databases/$(database)/documents/groups/$(groupId)) &&
          fileName == 'avatar.jpg' &&
          request.resource.size < 2 * 1024 * 1024 &&
          request.resource.contentType.matches('image/.*'))
      );
    }
    
    // ========== GROUP MEDIA (Images/Videos in Chat) ==========
    // Only members of the group can upload or read media.
    match /group-media/{groupId}/{fileName} {
        allow read: if isGroupMember(groupId);
        allow write: if isGroupMember(groupId);
    }
  }
}
