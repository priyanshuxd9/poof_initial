
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check group membership from Firestore
    function isGroupMember(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds.has(request.auth.uid);
    }
    
    // Helper function to check group ownership from Firestore
    function isGroupOwner(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId == request.auth.uid;
    }
    
    // USER AVATARS: Anyone can read, but only the user can write their own.
    match /user-avatars/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // GROUP AVATARS: Anyone can read, but only the group owner can write.
    match /group-avatars/{groupId}/{fileName} {
      allow read: if true;
      allow write: if isGroupOwner(groupId);
    }
    
    // GROUP MEDIA: Only group members can read or write. This fixes the upload error.
    match /group-media/{groupId}/{fileName} {
      allow read, write: if isGroupMember(groupId)
                         && request.resource.size < 30 * 1024 * 1024 // 30MB limit
                         && request.resource.contentType.matches('image/.*|video/.*');
    }
  }
}
