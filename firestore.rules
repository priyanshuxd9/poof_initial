
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a member of a group
    function isGroupMember(groupId) {
      // Allow rule evaluation to read the group document to check membership.
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return request.auth.uid in groupData.memberUserIds;
    }

    // USERS: Can read/update their own doc. Anyone can create (for signup).
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create;
    }

    // USERNAMES: Publicly readable for checking uniqueness. Owner can create/delete.
    match /usernames/{username} {
      allow read;
      // On create, check the UID in the new document.
      // On delete, check the UID in the existing document.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }
    
    // GROUPS: Members can read. Owner can delete. Members can join/update.
    match /groups/{groupId} {
      allow read: if request.auth != null && isGroupMember(groupId);
      // On create, owner must be the one creating it.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      // Members can update the group (e.g., join by adding their ID, owner can change timer/icon)
      allow update: if request.auth != null && isGroupMember(groupId);
      // Only the owner can delete the group document.
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // MESSAGES: Only group members can interact with messages.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && isGroupMember(groupId);
        // User can only update/delete their own messages.
        allow update: if request.auth != null && isGroupMember(groupId) && resource.data.senderId == request.auth.uid;
        // Deleting messages is disallowed to preserve chat history until group poofs.
        allow delete: if false; 
      }
    }
  }
}
