
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read, write: if isUser(userId);
    }
    
    // Rules for the 'usernames' collection
    match /usernames/{username} {
      allow read: if isAuthenticated();
      allow create: if request.resource.data.uid == request.auth.uid && request.resource.id == username.lower();
    }

    // Rules for the 'groups' collection
    match /groups/{groupId} {
      
      // --- Group Specific Helper Functions ---
      function isUserInMemberList(memberList, userId) {
        return userId in memberList;
      }
      
      function groupIsActive() {
        // This is the robust check.
        // It ensures the field exists AND is a timestamp before comparing.
        return 'selfDestructAt' in resource.data &&
               resource.data.selfDestructAt is timestamp &&
               resource.data.selfDestructAt > request.time;
      }

      function inviteCodeMatches() {
        return request.resource.data.inviteCode == resource.data.inviteCode;
      }
      
      function onlyMemberUserIdsAndLastActivityAreUpdated() {
        let a = request.resource.data;
        let b = resource.data;
        return a.diff(b).affectedKeys().hasOnly(['memberUserIds', 'lastActivity']);
      }

      // --- Rules ---
      allow read: if isAuthenticated() 
                   && isUserInMemberList(resource.data.memberUserIds, request.auth.uid)
                   && groupIsActive();

      allow create: if isAuthenticated() 
                     && request.resource.data.ownerId == request.auth.uid
                     && request.auth.uid in request.resource.data.memberUserIds;

      allow update: if isAuthenticated()
                     // Condition for a NEW member joining via invite code
                     && inviteCodeMatches()
                     && !isUserInMemberList(resource.data.memberUserIds, request.auth.uid)
                     && groupIsActive()
                     && onlyMemberUserIdsAndLastActivityAreUpdated();

      // Add other update/delete rules here if needed, e.g., for owners.
      // allow update: if isOwner(resource.data.ownerId) || (existing update logic...);
      // allow delete: if isOwner(resource.data.ownerId);
    }
  }
}
