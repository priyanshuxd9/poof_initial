rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isGroupMember(groupId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }

    function isGroupOwner(groupId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId;
    }

    function isGroupExpired(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return groupData.selfDestructAt.toMillis() < request.time.toMillis();
    }
    
    match /usernames/{username} {
      allow read;
      allow create, delete: if request.auth != null;
    }

    match /users/{userId} {
      allow read;
      allow create, update, delete: if request.auth.uid == userId;
    }

    match /groups/{groupId} {
      allow read: if isGroupMember(groupId);

      allow create: if request.auth.uid == request.resource.data.ownerId &&
                     request.auth.uid in request.resource.data.memberUserIds &&
                     request.resource.data.memberUserIds.size() == 1;

      allow update: if 
          // Case 1: Joining a group (adds member and updates activity).
          (
            isGroupMember(groupId) == false &&
            request.resource.data.memberUserIds == resource.data.memberUserIds.append(request.auth.uid) &&
            request.resource.data.diff(resource.data).affectedKeys().hasAll(['memberUserIds', 'lastActivity']) &&
            request.resource.data.diff(resource.data).affectedKeys().size() == 2
          ) ||
          // Case 2: Owner updating the group icon.
          (
            isGroupOwner(groupId) &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl'])
          ) ||
          // Case 3: Member updating lastActivity (e.g., when sending a message). This is done in a batch with message creation.
          (
            isGroupMember(groupId) &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])
          ) ||
          // Case 4: A member triggering a cleanup after expiry.
          (
            isGroupMember(groupId) &&
            isGroupExpired(groupId) &&
            request.resource.data.isCleaned == true &&
            request.resource.data.inviteCode == null &&
            request.resource.data.diff(resource.data).affectedKeys().hasAll(['isCleaned', 'inviteCode']) &&
            request.resource.data.diff(resource.data).affectedKeys().size() == 2
          );

      allow delete: if false;

      match /messages/{messageId} {
        allow list, get: if isGroupMember(groupId);
        
        allow create: if isGroupMember(groupId) && request.resource.data.senderId == request.auth.uid;

        allow update: if isGroupMember(groupId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);
        
        allow delete: if isGroupMember(groupId) && isGroupExpired(groupId);
      }
    }
  }
}
