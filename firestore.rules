
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a member of a group
    function isGroupMember(groupId) {
      return request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }

    // Users can read/write their own user document
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth != null; // Any authenticated user can create their profile doc
    }

    // Usernames must be unique. Only allow creation if the doc doesn't exist.
    // The owner UID must match the authenticated user.
    match /usernames/{username} {
        allow read: if true; // Publicly readable to check for uniqueness on client
        allow create: if request.resource.data.uid == request.auth.uid;
        allow delete: if resource.data.uid == request.auth.uid;
    }

    match /groups/{groupId} {
      // READ: Any member of the group can read the group document.
      // This rule securely enables both the active and archived group views.
      allow read: if request.auth.uid in resource.data.memberUserIds;

      // CREATE: A user can create a group if they are the owner and they are in the member list.
      allow create: if request.auth.uid == request.resource.data.ownerId &&
                        request.auth.uid in request.resource.data.memberUserIds;

      // UPDATE:
      // - A member can join by adding themselves to `memberUserIds` (for invite codes).
      // - The owner can update the imageUrl.
      allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity']) &&
                          request.auth.uid in request.resource.data.memberUserIds) ||
                          (request.auth.uid == resource.data.ownerId &&
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl']));

      // DELETE: No one can delete groups directly. This would be handled by a backend process.
      allow delete: if false;

      match /messages/{messageId} {
          // READ: Any member of the parent group can read messages.
        allow read: if isGroupMember(groupId);

        // CREATE: Any member can create messages. SenderId must be their own.
        allow create: if isGroupMember(groupId) && request.resource.data.senderId == request.auth.uid;

        // UPDATE: A user can update a message's reactions.
        allow update: if isGroupMember(groupId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);
        
        // DELETE: No one can delete messages directly.
        allow delete: if false;
      }
    }
  }
}
