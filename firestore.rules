rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper to check if user is in the group
    function isMember(groupId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }

    // USERNAMES: Enforces unique usernames
    match /usernames/{username} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
      allow update: if false;
    }

    // USERS: Profile data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // GROUPS
    match /groups/{groupId} {
      allow get: if isMember(groupId);
      allow list: if request.auth != null;

      allow create: if request.auth != null &&
                     request.resource.data.ownerId == request.auth.uid &&
                     request.auth.uid in request.resource.data.memberUserIds;

      allow update: if isMember(groupId) && resource.data.ownerId == request.auth.uid;

      allow delete: if false; // Prevent direct deletion

      // MESSAGES subcollection
      match /messages/{messageId} {
        allow read: if isMember(groupId);
        allow create, update: if isMember(groupId) && request.resource.data.senderId == request.auth.uid;
        allow delete: if false;
      }
    }
  }
}