
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Global Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // --- User & Username Rules ---
    match /users/{userId} {
      allow read, create, update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; 
    }

    match /usernames/{username} {
      allow read, create: if isAuthenticated();
    }

    // --- Group Rules ---
    match /groups/{groupId} {
      
      // Helper to check if a user is a member based on the document data
      // This correctly uses hasAny() to check for an item in a list.
      function isGroupMember(groupData) {
        return 'memberUserIds' in groupData && 
               groupData.memberUserIds is list && 
               groupData.memberUserIds.hasAny([request.auth.uid]);
      }

      // Helper to check if group is active based on document data
      function groupIsActive(groupData) {
        return 'selfDestructAt' in groupData &&
               groupData.selfDestructAt is timestamp &&
               groupData.selfDestructAt > request.time;
      }
      
      // GET: Allow a user to get a single group document if they are a member and it's active.
      allow get: if isAuthenticated() && isGroupMember(resource.data) && groupIsActive(resource.data);

      // LIST: Allow authenticated users to perform queries. The get rule above will secure the data read by the dashboard.
      // This rule allows the query-by-invite-code to succeed.
      allow list: if isAuthenticated();

      // CREATE: Allow authenticated user to create a group where they are the owner.
      allow create: if isAuthenticated() &&
                      request.resource.data.ownerId == request.auth.uid &&
                      request.auth.uid in request.resource.data.memberUserIds;

      // UPDATE: The key rule for joining a group and sending messages.
      allow update: if isAuthenticated() &&
                      // The group being updated must be active
                      groupIsActive(resource.data) &&
                      (
                        // Case 1: A NEW member is joining via invite code.
                        (
                          !isGroupMember(resource.data) &&
                          // They can ONLY add themselves to the member list.
                          request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]) &&
                          // And they must update the lastActivity timestamp.
                          request.resource.data.lastActivity > resource.data.lastActivity &&
                          // And they CANNOT change any other immutable fields.
                          request.resource.data.name == resource.data.name &&
                          request.resource.data.ownerId == resource.data.ownerId &&
                          request.resource.data.inviteCode == resource.data.inviteCode
                        ) ||
                        // Case 2: A CURRENT member is sending a message (updating lastActivity).
                        (
                          isGroupMember(resource.data) &&
                          request.resource.data.lastActivity > resource.data.lastActivity &&
                          request.resource.data.memberUserIds == resource.data.memberUserIds
                        )
                      );
      
      allow delete: if false;

      // --- Messages Subcollection Rules ---
      match /messages/{messageId} {
        // Helper to check parent group membership. get() is the correct way to access a different doc.
        function isParentGroupMember() {
            let parentGroupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
            return isGroupMember(parentGroupData);
        }

        allow read, list: if isParentGroupMember();
        allow create: if isParentGroupMember() && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false;
      }
    }
  }
}
