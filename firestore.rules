
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    match /usernames/{username} {
      allow read: if request.auth.uid != null;
      // Writes are handled by backend logic with security checks, so we can be more permissive here.
      // A user must be authenticated to attempt a write.
      allow write: if request.auth.uid != null; 
    }

    match /groups/{groupId} {
      // Any member can read group data. This is needed for both active chat and the archive page.
      allow read: if request.auth.uid in resource.data.memberUserIds;

      // Only the user creating the group can set themselves as the owner.
      allow create: if request.auth.uid != null 
                    && request.auth.uid == request.resource.data.ownerId
                    && request.auth.uid in request.resource.data.memberUserIds;
      
      // Members can update the group under specific conditions.
      allow update: if request.auth.uid in resource.data.memberUserIds && (
        // Condition 1: Joining the group (via invite code) before it expires
        (
          resource.data.selfDestructAt > request.time &&
          request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]) &&
          request.resource.data.lastActivity > resource.data.lastActivity
        ) ||
        // Condition 2: Owner updating the group icon
        (
          request.resource.data.imageUrl != resource.data.imageUrl &&
          request.auth.uid == resource.data.ownerId
        ) ||
        // Condition 3: Any member sending a message (updates lastActivity)
        (
          request.resource.data.lastActivity > resource.data.lastActivity &&
          // Ensure other critical fields are not changed during this update
          request.resource.data.name == resource.data.name &&
          request.resource.data.memberUserIds == resource.data.memberUserIds
        ) ||
        // Condition 4: A member triggers the cleanup process after expiry.
        // This allows setting isCleaned to true and removing the invite code.
        (
          resource.data.selfDestructAt < request.time &&
          request.resource.data.isCleaned == true &&
          request.resource.data.inviteCode == null &&
          request.resource.data.memberUserIds == resource.data.memberUserIds // member list must not change
        )
      );

      match /messages/{messageId} {
        // Allow read/update (reactions) if user is a member.
        allow read, update: if request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
        // Allow create if user is the sender.
        allow create: if request.auth.uid == request.resource.data.senderId;

        // Allow any member to delete messages, but ONLY if the group has expired.
        // This is the key rule for the cleanup process.
        allow delete: if request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds
                      && get(/databases/$(database)/documents/groups/$(groupId)).data.selfDestructAt < request.time;
      }
    }
  }
}
