
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isGroupMember(groupId) {
      return request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }

    // --- User and Username Collections ---
    match /users/{userId} {
      // Users can only manage their own document.
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    match /usernames/{username} {
      allow read;
      // Allow user to create their own username document upon signup.
      allow create: if request.auth.uid == request.resource.data.uid;
      // Allow user to delete their old username document when updating it.
      allow delete: if resource.data.uid == request.auth.uid;
    }

    // --- Groups Collection ---
    match /groups/{groupId} {
      // Members can read group data.
      allow read: if isGroupMember(groupId);
      
      // A user can create a group if they set themselves as the owner.
      allow create: if request.auth.uid == request.resource.data.ownerId;
      
      // --- Update Rules for Groups ---
      allow update: if
        // Rule for JOINING: A user can add themselves to a non-expired group.
        (request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]) && resource.data.selfDestructAt > request.time) ||
        
        // Rule for UPDATING ICON: Only the owner can update the group image.
        (request.auth.uid == resource.data.ownerId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl'])) ||

        // Rule for UPDATING LAST ACTIVITY: Any member can update the last activity timestamp (e.g., when sending a message).
        (isGroupMember(groupId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])) ||
        
        // Rule for CLEANUP: Anyone can trigger cleanup after expiry. This is a very specific update.
        (resource.data.selfDestructAt <= request.time && request.resource.data.diff(resource.data).affectedKeys().hasAll(['isCleaned', 'inviteCode']));
      
      // No one can delete a group document directly.
      allow delete: if false;

      // --- Messages Subcollection ---
      match /messages/{messageId} {
        allow list, get: if isGroupMember(groupId);
        
        // Members can create messages or update reactions before the group expires.
        allow create, update: if isGroupMember(groupId) && get(/databases/$(database)/documents/groups/$(groupId)).data.selfDestructAt > request.time;
        
        // Messages can only be deleted by the background cleanup process after the group is marked as cleaned.
        allow delete: if get(/databases/$(database)/documents/groups/$(groupId)).data.isCleaned == true;
      }
    }
  }
}
