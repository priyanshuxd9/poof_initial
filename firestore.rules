rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isGroupMember(groupId) {
      return isAuth() && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }
    
    function isGroupOwner(groupId) {
      return isAuth() && request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId;
    }

    // USER & USERNAME RULES
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
    }

    match /usernames/{username} {
      allow read: if isAuth();
      allow create: if isAuth(); // Further validation is in updateUserUsername function
      allow delete: if isAuth(); // Further validation is in updateUserUsername function
    }

    // GROUP & MESSAGE RULES
    match /groups/{groupId} {
      // READ: Allow any authenticated user to read the top-level group document.
      // This is required for dashboard queries and invite code lookups to work.
      // Sensitive data (messages) is in a subcollection with stricter rules.
      allow read: if isAuth();

      // CREATE: The user creating the group must be the owner and first member.
      allow create: if isAuth() &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.memberUserIds[0] == request.auth.uid &&
                       request.resource.data.memberUserIds.size() == 1;

      // UPDATE: Permissions depend on the action being performed.
      allow update: if 
        // Scenario 1: A user is joining the group via invite code.
        // They add themselves to `memberUserIds` and update `lastActivity`.
        (
          request.resource.data.memberUserIds.size() == resource.data.memberUserIds.size() + 1 &&
          request.resource.data.memberUserIds.hasAll(resource.data.memberUserIds.toSet().union([request.auth.uid])) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity'])
        ) ||
        // Scenario 2: The owner is updating the group icon.
        (
          isGroupOwner(groupId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl'])
        ) ||
        // Scenario 3: A member is sending a message (which updates lastActivity).
        (
          isGroupMember(groupId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])
        );
      
      // No one can delete a group directly through the client. This is handled by a backend process.
      allow delete: if false;

      // MESSAGES (subcollection)
      match /messages/{messageId} {
        // To read or list messages, you MUST be a member of the group.
        allow list, get: if isGroupMember(groupId);
        
        // To create a message, you MUST be a member and the sender.
        allow create: if isGroupMember(groupId) && 
                         request.resource.data.senderId == request.auth.uid;
        
        // To update a message (for reactions), you MUST be a member.
        allow update: if isGroupMember(groupId);
        
        // Messages cannot be deleted.
        allow delete: if false;
      }
    }
  }
}
