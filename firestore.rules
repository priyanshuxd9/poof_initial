
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check group membership
    function isGroupMember(groupId) {
      // Use `exists` to avoid errors on non-existent docs
      return exists(/databases/$(database)/documents/groups/$(groupId)) &&
             get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds.hasAny([request.auth.uid]);
    }

    // Users Collection
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow read: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'photoURL']);
      allow delete: if request.auth.uid == userId;
    }

    // Usernames Collection (for uniqueness check)
    match /usernames/{username} {
      allow get: if true;
      allow list: if request.auth.uid != null;
      allow create, delete: if request.auth.uid == request.resource.data.uid;
      allow update: if false;
    }

    // Groups Collection
    match /groups/{groupId} {
      allow create: if request.auth.uid == request.resource.data.ownerId &&
                       request.resource.data.memberUserIds[0] == request.auth.uid &&
                       request.resource.data.memberUserIds.size() == 1;

      allow get: if isGroupMember(groupId);

      // Allow listing groups if authenticated. The client query is responsible for
      // filtering, and the `get` rule above secures access to individual documents.
      allow list: if request.auth.uid != null;

      allow update: if isGroupMember(groupId) && (
                      // Allow a user to add THEMSELVES to the memberUserIds (joining)
                      (request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasAny(['memberUserIds', 'lastActivity'])) ||
                      // Allow any member to update ONLY the last activity timestamp
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])) ||
                      // Allow the owner to update name, description, or imageUrl
                      (resource.data.ownerId == request.auth.uid &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'description', 'imageUrl']))
                    );

      allow delete: if resource.data.ownerId == request.auth.uid;

      // Messages Subcollection
      match /messages/{messageId} {
        // Allow reading a single message if user is a member
        allow get: if isGroupMember(groupId);
        
        // Allow listing messages if the user is authenticated.
        // This is secure because a user must already know the `groupId` to
        // make this query, and they can only get the `groupId` by being
        -        // a member of the group (which is enforced by the parent `get` rule).
        allow list: if request.auth.uid != null;

        // Allow creating messages if the user is a group member and the sender
        allow create: if isGroupMember(groupId) &&
                         request.auth.uid == request.resource.data.senderId;

        // Allow updating only the reactions field if the user is a member
        allow update: if isGroupMember(groupId) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);

        allow delete: if false;
      }
    }
  }
}
