
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ========== HELPER FUNCTIONS ==========
    function isSignedIn() {
      return request.auth != null;
    }

    // ========== USERNAMES (for ensuring uniqueness) ==========
    match /usernames/{username} {
      allow read: if isSignedIn();
      // A user can only create a username document that maps to their own UID
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      // A user can only delete their own username document
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow update: if false; // Usernames are not updatable, they are deleted and re-created
    }

    // ========== USERS (profile data) ==========
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId;
      // A user can only update their own profile (username or photo)
      allow update: if request.auth.uid == userId
                    && request.resource.data.uid == userId; // Cannot change UID
    }

    // ========== GROUPS & MESSAGES ==========
    match /groups/{groupId} {

      // --- PERMISSIONS ---
      allow read: if isSignedIn() && isMember(resource.data);
      allow create: if isSignedIn() && isCreatingOwnGroup(request.resource.data);
      allow update: if isSignedIn() && isMember(resource.data) && (isJoiningGroup() || isOwnerEditing(resource.data) || isMemberUpdatingActivity(resource.data) || isCleaningGroup(resource.data));
      allow delete: if false; // Groups are never deleted by clients

      // --- HELPER FUNCTIONS for /groups/{groupId} ---
      function isCreatingOwnGroup(groupData) {
        return groupData.ownerId == request.auth.uid
          && groupData.memberUserIds == [request.auth.uid];
      }

      function isOwner(groupData) {
        return groupData.ownerId == request.auth.uid;
      }
      
      function isMember(groupData) {
        return request.auth.uid in groupData.memberUserIds;
      }

      function isJoiningGroup() {
        // Condition: The incoming member list must be the existing list plus the new user.
        let isAddingSelf = request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]);
        // Condition: Only memberUserIds and lastActivity can change
        return isAddingSelf && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity']);
      }

      function isOwnerEditing(groupData) {
        // Condition: The user must be the owner.
        return isOwner(groupData) && (
            // Allow changing timer
            request.resource.data.diff(groupData).affectedKeys().hasOnly(['selfDestructAt']) ||
            // Allow changing icon
            request.resource.data.diff(groupData).affectedKeys().hasOnly(['imageUrl'])
        );
      }
      
      function isCleaningGroup(groupData) {
         // Allow server-side cleanup functions to run
         return request.resource.data.isCleaned == true && request.resource.data.diff(groupData).affectedKeys().hasAll(['isCleaned', 'inviteCode']);
      }

      function isMemberUpdatingActivity(groupData) {
         // Condition: The user must be a member.
        let userIsMember = isMember(groupData);
        // Condition: The only field being changed is lastActivity.
        let onlyActivityChanges = request.resource.data.diff(groupData).affectedKeys().hasOnly(['lastActivity']);
        return userIsMember && onlyActivityChanges;
      }

      // === SUBCOLLECTION: MESSAGES ===
      match /messages/{messageId} {
        // READ: Only members of the parent group can read messages.
        allow read: if isSignedIn() && isMember(get(/databases/$(database)/documents/groups/$(groupId)).data);

        // CREATE: Only members can create messages, and they must be the sender.
        allow create: if isSignedIn()
                      && isMember(get(/databases/$(database)/documents/groups/$(groupId)).data)
                      && request.resource.data.senderId == request.auth.uid;

        // UPDATE: Members can update a message, but ONLY to change the 'reactions' map.
        // This prevents editing message content after it has been sent.
        allow update: if isSignedIn()
                      && isMember(get(/databases/$(database)/documents/groups/$(groupId)).data)
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);
        
        // DELETE: Only server-side functions can delete messages (during group cleanup).
        allow delete: if request.auth == null;
      }
    }
  }
}
