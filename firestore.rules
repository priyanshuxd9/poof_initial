
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if a user is a member of a group.
    // This works for 'get' rules where 'the_resource' is available.
    function isGroupMember(the_resource) {
      return isAuthenticated() && the_resource.data.memberUserIds.includes(request.auth.uid);
    }
    
    // Helper function to check group membership for subcollection rules where
    // the group document needs to be fetched.
    function isMemberOfParentGroup(groupId) {
      return isAuthenticated() && get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds.includes(request.auth.uid);
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Any authenticated user can read another user's public profile
      allow read: if isAuthenticated();
      // A user can only create their own user document
      allow create: if request.auth.uid == userId;
      // A user can only update their own username and photoURL
      allow update: if request.auth.uid == userId
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'photoURL']);
      // A user can delete their own user document.
      allow delete: if request.auth.uid == userId;
    }

    // Rules for 'usernames' collection
    match /usernames/{username} {
      // Anyone can check if a username exists (for uniqueness check)
      allow read: if true;
      // A user can only create/delete their own username entry
      allow write: if isAuthenticated() && (
        (request.method == 'create' && request.resource.data.uid == request.auth.uid) ||
        (request.method == 'delete' && resource.data.uid == request.auth.uid)
      );
    }

    // Rules for 'groups' collection
    match /groups/{groupId} {
      // GET: A user can get a single group document IF they are a member.
      // This rule also secures queries, as it's checked for every document a query returns.
      allow get: if isGroupMember(resource);

      // LIST: An authenticated user can query the groups collection.
      // The 'get' rule above ensures they only receive groups they are members of.
      // This also allows the 'join by invite code' query to work.
      allow list: if isAuthenticated();
      
      // CREATE: Allow a user to create a group if they are authenticated
      // and they are correctly listed as the owner and sole initial member.
      allow create: if isAuthenticated()
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.memberUserIds[0] == request.auth.uid
                    && request.resource.data.memberUserIds.size() == 1;

      // UPDATE: Allow updates under specific conditions
      allow update: if isGroupMember(resource) && (
        // Condition 1: Joining a group (only a single userId can be added to memberUserIds)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity'])
         && request.resource.data.memberUserIds.size() == resource.data.memberUserIds.size() + 1
         && request.resource.data.memberUserIds.hasAll(resource.data.memberUserIds)) ||
        // Condition 2: Owner updating group info (name, description, imageUrl)
        (request.auth.uid == resource.data.ownerId
         && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'description', 'imageUrl', 'lastActivity'])) ||
        // Condition 3: Any member updating lastActivity (e.g. by sending a message)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity']))
      );
    }
    
    // Rules for 'messages' subcollection
    match /groups/{groupId}/messages/{messageId} {
        // Allow members to read messages
        allow read: if isMemberOfParentGroup(groupId);

        // Allow members to create messages, ensuring they are the sender
        allow create: if isMemberOfParentGroup(groupId) 
                      && request.resource.data.senderId == request.auth.uid;

        // Allow members to update messages, but only the 'reactions' field
        allow update: if isMemberOfParentGroup(groupId)
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);
    }
  }
}
