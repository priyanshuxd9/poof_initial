
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write their own profile document.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Usernames can be read by anyone to check for uniqueness.
    // Writes are only allowed in a batch with the user document update,
    // so a simple "authenticated" check is sufficient here.
    match /usernames/{username} {
      allow read;
      allow write: if request.auth != null;
    }

    // Rules for groups and their subcollections.
    match /groups/{groupId} {
      // Allow a user to read a group's details only if they are a member.
      allow read: if request.auth != null && request.auth.uid in resource.data.memberUserIds;

      // Any authenticated user can create a new group, and they must be the owner.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;

      // An update is allowed for specific scenarios:
      allow update: if
        // Scenario 1: The owner is updating the group icon.
        (request.auth.uid == resource.data.ownerId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl'])) ||

        // Scenario 2: An authenticated user is joining the group.
        // They must not already be a member and can only add themselves and update activity.
        (
          request.auth.uid != null &&
          !(request.auth.uid in resource.data.memberUserIds) &&
          request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity'])
        ) ||

        // Scenario 3: A member sends a message, updating only the lastActivity timestamp.
        (
          request.auth.uid in resource.data.memberUserIds &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])
        );


      // Rules for the 'messages' subcollection within a group.
      match /messages/{messageId} {
        // Any member of the group can read and create messages.
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;

        // Any member of the group can update messages (e.g., for reactions).
        allow update: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
      }
    }
  }
}
