
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Usernames must be unique. This collection stores a mapping from username -> uid.
    match /usernames/{username} {
      allow read;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if request.auth.uid == resource.data.uid;
      allow update: never;
    }

    // User profile data.
    match /users/{userId} {
      // Any authenticated user can read profile data (for member lists etc.)
      allow read: if request.auth != null;
      // Users can only create, update, or delete their own profile document.
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Groups collection
    match /groups/{groupId} {
      // Allow any authenticated user to read group metadata.
      // This is necessary for the "join by invite code" feature and for listing groups.
      allow read: if request.auth != null;

      // Allow a user to create a group if they are authenticated
      // and correctly set themselves as the owner and sole initial member.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.memberUserIds == [request.auth.uid];

      // Allow updates under specific conditions
      allow update: if request.auth != null && (
        // Condition 1: A user is joining the group via invite code.
        // They can only add their own UID to the memberUserIds array and update lastActivity.
        (
          !(request.auth.uid in resource.data.memberUserIds) &&
          request.resource.data.memberUserIds == resource.data.memberUserIds.concat(request.auth.uid) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity'])
        ) ||
        // Condition 2: The group owner is updating the group info.
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.diff(resource.data).affectedKeys().hasAny(['name', 'description', 'imageUrl', 'lastActivity'])
        ) ||
        // Condition 3: Any member is updating only the last activity timestamp (e.g. by sending a message).
        (
          request.auth.uid in resource.data.memberUserIds &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])
        )
      );

      // No one can delete a group document directly. Deletion happens via self-destruct timer (backend function).
      allow delete: if false;

      // Messages sub-collection
      match /messages/{messageId} {
        // Allow read only if the user is a member of the group.
        allow read: if request.auth != null &&
                       request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;

        // Allow create (writing a message) only if the user is a member of the group.
        allow create: if request.auth != null &&
                         request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds &&
                         request.resource.data.senderId == request.auth.uid;

        // Messages are immutable.
        allow update, delete: if false;
      }
    }
  }
}
