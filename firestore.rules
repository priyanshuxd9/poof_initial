
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the requesting user is the owner of a given resource (based on a userId field)
    function isResourceOwner(userIdField) {
      return request.auth.uid == userIdField;
    }

    // Checks if the current authenticated user's ID matches the given userId (typically for user profile access)
    function isRequestingOwnProfile(userId) {
      return request.auth.uid == userId;
    }

    // Checks if only specified fields are being changed during an update
    function onlyTheseFieldsAreChanged(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys.hasOnly(allowedFields);
    }

    // Checks if the requesting user is already a member of the group (using existing document data)
    function isAlreadyMember() {
      return request.auth.uid in resource.data.memberUserIds;
    }

    // Checks if the requesting user is the one being added to memberUserIds in an update operation
    function isAddingSelfAsNewMember() {
      return !(request.auth.uid in resource.data.memberUserIds) && // Was not in old list
             (request.auth.uid in request.resource.data.memberUserIds); // Is in new list
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && isRequestingOwnProfile(userId);
      allow create: if isAuthenticated() && 
                       isRequestingOwnProfile(userId) && // User can only create their own profile
                       request.resource.data.uid == userId &&
                       request.resource.data.username is string &&
                       request.resource.data.username.size() >= 3 && request.resource.data.username.size() <= 20 &&
                       request.resource.data.keys().hasOnly(['uid', 'email', 'username', 'photoURL', 'createdAt']);
      // No updates/deletes for user profiles through client for now
    }

    // Usernames (for uniqueness check and mapping)
    match /usernames/{usernameDocId} { // usernameDocId is the lowercased username
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.username.lower() == usernameDocId && // Ensure consistent ID
                       request.resource.data.keys().hasOnly(['uid', 'username']);
      // No updates/deletes for usernames through client
    }

    // Groups
    match /groups/{groupId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.memberUserIds;

      allow create: if isAuthenticated() &&
                       request.resource.data.ownerId == request.auth.uid && // Line 55 should be around here
                       request.resource.data.memberUserIds == [request.auth.uid] && // Owner is the only member initially
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.inviteCode is string && request.resource.data.inviteCode.size() > 0 &&
                       request.resource.data.selfDestructAt is timestamp &&
                       request.resource.data.selfDestructAt > request.time &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.lastActivity == request.time &&
                       request.resource.data.keys().hasOnly([
                         'name', 'description', 'purpose', 'theme', 'inviteCode', 
                         'ownerId', 'memberUserIds', 'createdAt', 'selfDestructAt', 
                         'imageUrl', 'lastActivity'
                       ]);

      allow update: if isAuthenticated() &&
                       // Condition 1: User is joining the group
                       (
                         !isAlreadyMember() && // Line 68 should be around here
                         isAddingSelfAsNewMember() &&
                         resource.data.selfDestructAt > request.time && // Group not expired
                         onlyTheseFieldsAreChanged(['memberUserIds', 'lastActivity']) &&
                         request.resource.data.lastActivity == request.time &&
                         // Ensure memberUserIds is only appended with the current user
                         request.resource.data.memberUserIds.size() == resource.data.memberUserIds.size() + 1 &&
                         request.resource.data.memberUserIds.hasAll(resource.data.memberUserIds) &&
                         request.resource.data.memberUserIds.hasAny([request.auth.uid])
                       );
                       // Future: Add condition for owner updating group details (excluding members directly)
                       // || (isResourceOwner(resource.data.ownerId) && onlyTheseFieldsAreChanged(['name', 'description', 'theme', 'imageUrl', 'lastActivity']))
      
      allow delete: if isAuthenticated() && isResourceOwner(resource.data.ownerId); // Only owner can delete
    }
  }
}

    