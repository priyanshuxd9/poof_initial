
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ==== Global Helper Functions ====
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // ==== Users Collection ====
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update, delete: if false;
    }

    // ==== Usernames Collection ====
    match /usernames/{username} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }

    // ==== Groups Collection ====
    match /groups/{groupId} {

      function isGroupMember() {
        return request.auth.uid in resource.data.memberUserIds;
      }

      function groupIsActive() {
        // Ensures the group's self-destruct time is in the future.
        return resource.data.selfDestructAt > request.time;
      }
      
      // READ: Users can read group data if they are authenticated, a member of the group, and the group is active.
      // This rule requires the client to query only for active groups to prevent permission errors.
      allow read: if isAuthenticated() && isGroupMember() && groupIsActive();
      
      // CREATE: A user can create a group if they are authenticated, and they set themselves as the owner and the sole initial member.
      allow create: if isAuthenticated() &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.memberUserIds == [request.auth.uid];

      // UPDATE: A user can update a group document ONLY to add themselves to the memberUserIds array,
      // provided they are not already a member and the group is still active.
      function isJoiningGroup() {
        // True if the incoming list is exactly the old list plus the new user's ID
        return request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]);
      }
      function onlyMembershipFieldsUpdated() {
        // Ensures only the member list and last activity are being changed.
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity']);
      }
      
      allow update: if isAuthenticated() &&
                       isJoiningGroup() &&
                       onlyMembershipFieldsUpdated() &&
                       groupIsActive();

      allow delete: if false; // Deletes should be handled by a backend function/scheduled task
    }
  }
}
