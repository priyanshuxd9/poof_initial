rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Usernames must be unique. This collection stores a mapping of usernames to user IDs.
    match /usernames/{username} {
      allow read;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if request.auth.uid == resource.data.uid;
      allow update: never;
    }

    // User profile data.
    match /users/{userId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Groups collection
    match /groups/{groupId} {
      // Allow any authenticated user to read group metadata.
      // This is necessary for the "join by invite code" feature to work, but it makes group
      // metadata (like name and member list) readable by any logged-in user.
      // Message content remains secure.
      allow read: if request.auth != null;

      // Allow a user to create a group if they are authenticated and set themselves as the owner.
      allow create: if request.auth != null &&
                      request.resource.data.ownerId == request.auth.uid &&
                      request.resource.data.memberUserIds == [request.auth.uid];

      // Allow updates if the user is a member, or is joining the group.
      allow update: if request.auth != null &&
                      (request.auth.uid in resource.data.memberUserIds ||
                       request.resource.data.memberUserIds == resource.data.memberUserIds.append(request.auth.uid));

      // No one can delete a group document directly.
      allow delete: never;

      // Messages sub-collection
      match /messages/{messageId} {
        // Only members can read or write messages.
        allow read, write: if request.auth != null &&
                              request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
      }
    }
  }
}