
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is a member of a group.
    function isGroupMember(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds.hasAny([request.auth.uid]);
    }

    // Users: Can create and update their own profile. Anyone authenticated can read a profile.
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list: if false; // Do not allow listing all users for security.
      allow create, update, delete: if request.auth.uid == userId;
    }

    // Usernames: Enforces unique usernames.
    match /usernames/{username} {
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if request.resource.data.uid == request.auth.uid;
      // Allow deleting your own username mapping (e.g. on account deletion)
      allow delete: if get(/databases/$(database)/documents/usernames/$(username)).data.uid == request.auth.uid;
    }

    // Groups Collection
    match /groups/{groupId} {
      // Allow reading a specific group's details if the user is a member.
      allow get: if isGroupMember(groupId);
      
      // Allow LISTING groups for any authenticated user.
      // This is required for the "array-contains" query on the dashboard to work.
      // It is secure because the `get` rule above still protects each individual document from being read.
      allow list: if request.auth != null;

      // Allow group CREATION if the user is the owner and is in the member list.
      allow create: if request.auth.uid == request.resource.data.ownerId &&
                       request.auth.uid in request.resource.data.memberUserIds;
                       
      // Allow group UPDATES if the user is a member and is not changing critical, immutable fields.
      // Only the owner can change the imageUrl.
      allow update: if isGroupMember(groupId) &&
                     request.resource.data.ownerId == resource.data.ownerId &&
                     request.resource.data.inviteCode == resource.data.inviteCode &&
                     request.resource.data.createdAt == resource.data.createdAt &&
                     (request.auth.uid == resource.data.ownerId || request.resource.data.imageUrl == resource.data.imageUrl);

      // Messages Subcollection
      match /messages/{messageId} {
        // Allow reading/listing messages if user is a member of the parent group.
        allow get, list: if isGroupMember(groupId);

        // Allow creating a message if user is a member and the sender.
        allow create: if isGroupMember(groupId) && request.resource.data.senderId == request.auth.uid;

        // Allow updates ONLY for the 'reactions' field.
        // This lets users react without changing the message content.
        allow update: if isGroupMember(groupId) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);
      }
    }
  }
}
