
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isGroupMember(groupData) {
      return request.auth.uid in groupData.memberUserIds;
    }

    function isGroupOwner(groupData) {
      return request.auth.uid == groupData.ownerId;
    }

    function groupIsActive(groupData) {
      return request.time < groupData.selfDestructAt;
    }

    // Main Collections
    match /groups/{groupId} {
      // Allow authenticated users to query for groups (for dashboard and joining)
      allow list: if isAuth();

      // Only allow a member of an active group to read its full data
      allow get: if isAuth() && isGroupMember(resource.data) && groupIsActive(resource.data);

      // Rules for creating a new group document
      allow create: if isAuth()
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.memberUserIds == [request.auth.uid]
                    && groupIsActive(request.resource.data);

      // Rules for updating an existing group document
      allow update: if isAuth() && groupIsActive(resource.data) && (
        // SCENARIO 1: A user is joining the group
        (
          !isGroupMember(resource.data) &&
          request.resource.data.memberUserIds == resource.data.memberUserIds.append(request.auth.uid) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity'])
        ) ||
        // SCENARIO 2: The group owner is updating the image URL
        (
          isGroupOwner(resource.data) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl'])
        ) ||
        // SCENARIO 3: A member is sending a message, which updates last activity
        (
          isGroupMember(resource.data) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])
        )
      );

      // Subcollection for messages within a group
      match /messages/{messageId} {
        // Only active group members can read messages
        allow list, get: if isAuth() && isGroupMember(get(/databases/$(database)/documents/groups/$(groupId)).data);
        
        // Only active group members can create messages, and they must be the sender
        allow create: if isAuth() && isGroupMember(get(/databases/$(database)/documents/groups/$(groupId)).data)
                       && request.resource.data.senderId == request.auth.uid;

        // Messages are immutable once created
        allow update, delete: if false;
      }
    }

    // Collection to enforce unique usernames
    match /usernames/{username} {
      allow read, create: if isAuth();
      allow update, delete: if false;
    }

    // Collection for user profile data
    match /users/{userId} {
      allow read: if isAuth();
      // A user can only create or update their own profile document
      allow create, update: if isAuth() && request.auth.uid == userId;
    }
  }
}
