
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for user profiles
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // User can create their own profile document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Consider adding an update rule if profile editing is implemented:
      // allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for unique usernames
    match /usernames/{usernameDocId} {
      // Allow anyone to read (check if a username exists) during signup
      allow read: if true; 
      
      // Allow an authenticated user to create their username document
      // when their UID matches the UID in the document being created.
      allow create: if request.auth != null &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.username != null;
    }

    // Rules for groups
    match /groups/{groupId} {
      // Allow authenticated users to read a group if their UID is in the memberUserIds array
      allow read: if request.auth != null && request.auth.uid in resource.data.memberUserIds;

      // Allow authenticated users to create a group if:
      // 1. They are the ownerId specified in the new document.
      // 2. Their UID is included in the memberUserIds array of the new document.
      // 3. The group name and description are provided (basic validation).
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.ownerId &&
                       request.auth.uid in request.resource.data.memberUserIds &&
                       request.resource.data.name != null &&
                       request.resource.data.description != null;
      
      // Allow owner to update general group details (e.g., name, description, imageUrl).
      // For messages and member list changes, more specific rules might be needed under a subcollection or with field-level checks.
      allow update: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // Allow owner to delete the group
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // Placeholder for messages subcollection - we'll add rules for this later
      // match /messages/{messageId} {
      //   allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
      // }
    }
  }
}
