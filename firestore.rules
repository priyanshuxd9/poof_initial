
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isGroupMember(groupId) {
      return request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUserIds;
    }
    
    function isGroupOwner(groupId) {
      return request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId;
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow read, update: if isAuth() && isOwner(userId);
      allow create: if isAuth() && isOwner(userId);
    }

    match /usernames/{username} {
      allow create: if isAuth();
      allow read: if isAuth();
      allow delete: if isAuth() && resource.data.uid == request.auth.uid;
    }

    match /groups/{groupId} {
      allow read: if isAuth() && isGroupMember(groupId);

      allow create: if isAuth()
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.memberUserIds == [request.auth.uid];
      
      allow update: if isAuth() && (
        // Allow a user to join a group
        (
          request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity'])
        ) ||
        // Allow the owner to update the group icon
        (
          isGroupOwner(groupId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl'])
        ) ||
        // Allow the owner to update the self-destruct timer
        (
          isGroupOwner(groupId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['selfDestructAt'])
        ) ||
        // Allow the app to update last activity
        (
          isGroupMember(groupId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])
        ) ||
        // Allow the app to perform the background cleanup on an expired group
        (
          resource.data.selfDestructAt.toMillis() < request.time.toMillis() &&
          request.resource.data.isCleaned == true &&
          request.resource.data.inviteCode == null &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isCleaned', 'inviteCode'])
        )
      );

      allow delete: if false;

      // Messages Subcollection
      match /messages/{messageId} {
        allow list, read: if isGroupMember(groupId);
        
        allow create: if isGroupMember(groupId) 
                       && request.resource.data.senderId == request.auth.uid;
        
        allow update: if isGroupMember(groupId)
                       && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);
        
        // Allow deletion of messages only as part of the group cleanup process
        allow delete: if isGroupMember(groupId)
                       && get(/databases/$(database)/documents/groups/$(groupId)).data.selfDestructAt.toMillis() < request.time.toMillis();
      }
    }
  }
}
