
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the document being created ONLY contains keys from the allowedFields list.
    function onlyTheseFieldsAreWritten(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }

    // Helper function to check if the write operation ONLY changes fields listed in allowedFields.
    // Other fields must remain unchanged from their existing values.
    function onlyTheseFieldsAreChanged(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys.hasOnly(allowedFields);
    }

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /usernames/{username} {
      allow read: if request.auth != null;
      // Allow create if user is authenticated, uid matches, username matches, and only specific fields are written
      allow create: if request.auth != null &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.username == username && // username is the path variable
                       request.resource.data.username != '' && // Ensure username is not empty
                       onlyTheseFieldsAreWritten(['uid', 'username']);
    }

    match /groups/{groupId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.memberUserIds;

      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.ownerId &&
                       request.auth.uid in request.resource.data.memberUserIds &&
                       request.resource.data.memberUserIds.size() == 1 && // Only owner is member on create
                       request.resource.data.name != '' && // Ensure name is not empty
                       request.resource.data.inviteCode != '' && // Ensure inviteCode is not empty
                       // Ensure selfDestructAt is in the future
                       request.resource.data.selfDestructAt > request.time &&
                       // Ensure only allowed fields are written on create
                       onlyTheseFieldsAreWritten([
                         'name', 'description', 'purpose', 'theme', 'inviteCode',
                         'ownerId', 'memberUserIds', 'createdAt', 'selfDestructAt',
                         'imageUrl', 'lastActivity'
                       ]) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      allow update: if request.auth != null &&
                       // Scenario: User joining a group
                       (
                         request.auth.uid !in resource.data.memberUserIds && // User is not already a member
                         request.auth.uid in request.resource.data.memberUserIds && // User is being added
                         // Ensure only the current user is being added to memberUserIds
                         request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid]) &&
                         // Ensure group is not expired
                         resource.data.selfDestructAt > request.time &&
                         // Check that only 'memberUserIds' and 'lastActivity' are being changed
                         onlyTheseFieldsAreChanged(['memberUserIds', 'lastActivity']) &&
                         // If lastActivity is changed, it must be the server timestamp
                         (
                           !('lastActivity' in request.resource.data.diff(resource.data).affectedKeys) ||
                           request.resource.data.lastActivity == request.time
                         )
                       );
                       // Add other update scenarios here if needed (e.g., owner updating group details)
                       // For example:
                       // || (
                       //   request.auth.uid == resource.data.ownerId &&
                       //   onlyTheseFieldsAreChanged(['name', 'description', 'purpose', 'theme', 'imageUrl', 'lastActivity']) &&
                       //   (
                       //      !('lastActivity' in request.resource.data.diff(resource.data).affectedKeys) ||
                       //      request.resource.data.lastActivity == request.time
                       //   )
                       // )

      // No general delete for now, groups "poof" based on timer
      allow delete: if false;
    }
  }
}
