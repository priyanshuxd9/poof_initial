
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Users Collection ---
    // Users can read/write their own user document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- Usernames Collection ---
    // Used to enforce unique usernames.
    match /usernames/{username} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
                      && request.resource.data.uid == request.auth.uid
                      && request.resource.data.username == username;
      allow update, delete: if false;
    }

    // --- Groups Collection ---
    match /groups/{groupId} {
      
      // --- Read Rule (Simplified for Debugging) ---
      // Allow a user to read a group document if they are authenticated 
      // and their UID is in the memberUserIds list.
      // This temporarily ignores the self-destruct timer check to isolate the problem.
      allow read: if request.auth != null && resource.data.memberUserIds.hasAny([request.auth.uid]);
      
      // --- Create Rule ---
      // Users can create a group if they are the owner and the data is structured correctly.
      allow create: if request.auth != null
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.memberUserIds == [request.auth.uid];
      
      // --- Update Rule (for joining) ---
      // Users can join a group if they aren't already a member and the group is active.
      function isNotExpired() {
        return resource.data.selfDestructAt is timestamp && request.time < resource.data.selfDestructAt;
      }

      allow update: if request.auth != null
                    && isNotExpired()
                    // Check if they are not already a member
                    && !resource.data.memberUserIds.hasAny([request.auth.uid])
                    // Check they are only adding themselves to memberUserIds
                    && request.resource.data.memberUserIds == resource.data.memberUserIds.concat([request.auth.uid])
                    // Check they are only changing memberUserIds and lastActivity
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUserIds', 'lastActivity']);
        
      allow delete: if false;
    }
  }
}
