
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { LogIn, Loader2 } from "lucide-react";
import { useAuth } from "@/contexts/auth-context";
import { db } from "@/lib/firebase";
import {
  collection,
  query,
  where,
  getDocs,
  doc,
  updateDoc,
  arrayUnion,
  serverTimestamp,
  Timestamp,
} from "firebase/firestore";

export function JoinGroupDialog() {
  const [inviteCode, setInviteCode] = useState("");
  const [isJoining, setIsJoining] = useState(false);
  const [isOpen, setIsOpen] = useState(false); // Control dialog visibility
  const { toast } = useToast();
  const { user } = useAuth();
  const router = useRouter();

  const handleSubmit = async () => {
    if (!user || !user.uid) {
      toast({
        title: "Not Authenticated",
        description: "You must be logged in to join a group.",
        variant: "destructive",
      });
      return;
    }
    if (!inviteCode.trim()) {
      toast({
        title: "Invite Code Required",
        description: "Please enter an invite code to join a group.",
        variant: "destructive",
      });
      return;
    }
    setIsJoining(true);

    try {
      const groupsRef = collection(db, "groups");
      // Invite codes are case-sensitive as generated by utils.ts
      const q = query(groupsRef, where("inviteCode", "==", inviteCode.trim()));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        toast({
          title: "Group Not Found",
          description: "No group found with that invite code. Please check the code (it's case-sensitive) and try again.",
          variant: "destructive",
        });
        setIsJoining(false);
        return;
      }

      const groupDoc = querySnapshot.docs[0];
      const groupData = groupDoc.data();

      if (groupData.memberUserIds && groupData.memberUserIds.includes(user.uid)) {
        toast({
          title: "Already a Member",
          description: `You are already a member of "${groupData.name}".`,
        });
        setIsOpen(false);
        setIsJoining(false);
        return;
      }
      
      const selfDestructTimestamp = groupData.selfDestructAt as Timestamp;
      const selfDestructDate = selfDestructTimestamp.toDate();
      if (new Date() > selfDestructDate) {
         toast({
          title: "Group Expired",
          description: "This group has already self-destructed and cannot be joined.",
          variant: "destructive",
        });
        setIsJoining(false);
        return;
      }

      const groupDocRef = doc(db, "groups", groupDoc.id);
      await updateDoc(groupDocRef, {
        memberUserIds: arrayUnion(user.uid),
        lastActivity: serverTimestamp(),
      });

      toast({
        title: "Successfully Joined Group!",
        description: `You are now a member of "${groupData.name}". Your dashboard will update.`,
      });
      setInviteCode(""); 
      setIsOpen(false); 
      router.refresh(); // Refreshes server components and data for the current route

    } catch (error: any) {
      console.error("Error joining group:", error);
      toast({
        title: "Failed to Join Group",
        description: error.message || "An unexpected error occurred. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsJoining(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="lg" className="w-full sm:w-auto">
          <LogIn className="mr-2 h-5 w-5" /> Join with Code
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Join a Poof Group</DialogTitle>
          <DialogDescription>
            Enter the invite code (case-sensitive) you received to join an existing group.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="invite-code" className="text-right">
              Invite Code
            </Label>
            <Input
              id="invite-code"
              value={inviteCode}
              onChange={(e) => setInviteCode(e.target.value)} // Keep case-sensitive
              className="col-span-3"
              placeholder="Enter code..."
              disabled={isJoining}
            />
          </div>
        </div>
        <DialogFooter>
          <Button type="button" variant="outline" onClick={() => setIsOpen(false)} disabled={isJoining}>Cancel</Button>
          <Button type="button" onClick={handleSubmit} disabled={isJoining}>
            {isJoining && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Join Group
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
